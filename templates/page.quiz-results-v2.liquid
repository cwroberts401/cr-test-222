<!-- Loader and Products Container -->
<h1> Your Quiz Results </h1>
<div id="loader" class="loader">{% render 'loading-spinner', class: 'run'%}</div>
<div id="hero-container" class="hero-container"></div>
<div id="products-container" class="product-grid"></div>

<!-- Add All to Cart Button -->
<button class="add-to-cart-btn" style="display: none; min-width: 50%; margin: 10px auto 100px; background-color: black; color: white;" id="addAllToCart" style="margin: 20px; display: none;">Add All to Cart</button>
<form method="post" action="/cart/add">
<input name="id" value="${ product.variants[0].id }" type="hidden" />
<input class="add-to-cart-btn" name="add" value="addToCart" type="submit" />
</form>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const productHandles = urlParams.get('product_handles').split(',');
    const rowLength = parseInt(urlParams.get('row_length'), 10) || 3;
    const hideOos = urlParams.get('hide_oos') === "true";
    let showHero = urlParams.get('show_hero') === "true";

    const productsContainer = document.getElementById('products-container');
    const heroContainer = document.getElementById('hero-container');
    const loader = document.getElementById('loader');
    const addAllToCartButton = document.getElementById('addAllToCart');

    let variantSelections = {}; // Stores current variant IDs for each product

    function formatPrice(priceInCents) {
        return (priceInCents / 100).toFixed(2);
    }

    function updateVariant(variantId, productHandle) {
        const productInfo = document.querySelector(`.product-card[data-handle="${productHandle}"]`);
        const selectedVariant = productInfo.querySelector(`button[data-variant-id="${variantId}"]`);

        productInfo.querySelector('.product-image').src = selectedVariant.dataset.imageUrl;
        productInfo.querySelector('.product-image').alt = selectedVariant.dataset.title;
        productInfo.querySelector('.price').textContent = `$${formatPrice(selectedVariant.dataset.price)}`;

        variantSelections[productHandle] = variantId; // Update the currently selected variant ID
    }

    productsContainer.addEventListener('click', function(event) {
        if (event.target.matches('.variant-btn')) {
            const variantId = event.target.dataset.variantId;
            const productHandle = event.target.dataset.handle;
            updateVariant(variantId, productHandle);
        }
    });

    addAllToCartButton.addEventListener('click', function() {
        Object.values(variantSelections).forEach(variantId => {
            // Implement add to cart functionality or redirect as needed
            console.log('Adding variant ID to cart:', variantId); // For debugging
        });
    });

    Promise.all(productHandles.map(handle => fetchProduct(handle)))
        .then(results => {
            results.forEach(result => {
                if (!result) return;
                const { handle, product } = result;

                // Initially set the first variant as selected
                variantSelections[handle] = product.variants[0].id;

                const container = showHero && handle === productHandles[0] ? heroContainer : productsContainer;
                const productCard = document.createElement('div');
                productCard.className = 'product-card';
                productCard.setAttribute('data-handle', handle);
                productCard.style.flexBasis = `calc(100% / ${rowLength} - 20px)`;

                let variantButtons = product.variants.map(variant =>
                    `<button class="variant-btn" data-variant-id="${variant.id}" data-handle="${handle}" data-title="${variant.title}" data-price="${variant.price}" data-image-url="${product.images[0]}">${variant.title}</button>`
                ).join('');

                productCard.innerHTML = `
                    <a href="/products/${handle}">
                        ${product.available ? '' : '<div class="sold-out">sold out</div>'}
                        <img src="${product.images[0]}" alt="${product.title}" class="product-image">
                    </a>
                    <div class="card-info">
                        <h2 class="product-title">${product.title}</h2>
                        <p class="price">$${formatPrice(product.variants[0].price)}</p>
                        ${variantButtons}
                    </div>
                `;

                container.appendChild(productCard);
            });

            loader.style.display = 'none';
            addAllToCartButton.style.display = 'block';
        })
        .catch(error => {
            console.error('Error loading products:', error);
        });
});
</script>


<style>
  h1 {
    text-align: center;
    margin: 20px 0 10px 0;
  }
  .product-title {
    font-size: 13px;
    margin: 0;
  }
  .loader {
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 50px;
    height: 50px;
}
.product-grid {
    display: flex;
    flex-wrap: wrap;
    margin-top: 20px;
}
.card-info {
  padding: 17px 0;
}
.price {
  margin-top: 7px;
  font-size: 16px;
}
.product-card {
    margin: 10px;
    //flex-grow: 1;
}
.hero-product {
    font-size: 24px;
    color: red;
}
.hero-container {
  max-width: 75%;
  margin: 0 auto;
  border: solid 1px;
  padding: 20px 40px;
}
.add-to-cart-btn {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  font: inherit;
  font-size: 1.5rem;
  text-decoration: none;
  color: rgb(18, 18, 18);
  -webkit-appearance: none;
  appearance: none;
  background-color: rgb(255, 255, 255);
  padding: .8rem;
  min-width: 100%;
  box-sizing: border-box;
  border: solid 1px;
  height: 47px;
}
.sold-out{
  background-color: black;
  padding: 5px 12px;
  position: absolute;
  margin: 10px;
  color: white;
}

.add-to-cart-btn:hover {
  border: solid 2px;
  transition-delay: 0s;
  transition-duration: 0.1s;
  transition-timing-function: ease;
}

.variant-btn {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  font: inherit;
  font-size: 1.2rem;
  text-decoration: none;
  color: rgb(18, 18, 18);
  -webkit-appearance: none;
  appearance: none;
  background-color: rgb(255, 255, 255);
  padding: .8rem;
  min-width: 30%;
  box-sizing: border-box;
  border: solid 1px;
  height: 25px;
}

.variant-btn:hover {
  border: solid 2px;
  transition-delay: 0s;
  transition-duration: 0.1s;
  transition-timing-function: ease;
}

.variant-placeholder {
  width: 100%;
  height: 27px;
  display: block !important;
}

button:disabled,
button[disabled]{
  cursor: initial;
  color: rgba(18, 18, 18, 0.6);
  border: solid 1px rgba(18, 18, 18, 0.6);

}

button:disabled,
button[disabled]:hover {
  border: solid 1px rgba(18, 18, 18, 0.6);
}


@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>