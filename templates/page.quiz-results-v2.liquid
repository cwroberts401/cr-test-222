<!-- Loader and Products Container -->
<h1> Your Quiz Results </h1>
<div id="loader" class="loader"></div>
<div id="hero-container" class="hero-container"></div>
<div id="products-container" class="product-grid"></div>

<!-- Add All to Cart Button -->
<button id="addAllToCart" style="margin: 20px; display: none;">Add All to Cart</button>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const productHandles = urlParams.get('product_handles').split(',');
    const rowLength = parseInt(urlParams.get('row_length'), 10) || 3;
    const hideOos = urlParams.get('hide_oos') === "true";
    let showHero = urlParams.get('show_hero') === "true";

    const productsContainer = document.getElementById('products-container');
    const heroContainer = document.getElementById('hero-container');
    const loader = document.getElementById('loader');
    const addAllToCartButton = document.getElementById('addAllToCart');

    let allVariantIds = []; // To store all first variant ids for the add all to cart functionality

    // Function to fetch product data
    function fetchProduct(handle) {
        return fetch(`/products/${handle}.js`)
            .then(response => response.json())
            .then(product => {
                if (!product.available && hideOos) {
                    return null; // Return null if product should be skipped
                }
                return { handle, product };
            });
    }

    // Manage fetching all products
    Promise.all(productHandles.map(handle => fetchProduct(handle)))
        .then(results => {
            results.forEach(result => {
                if (!result) return; // Skip rendering if null
                const { handle, product } = result;
                
                const container = showHero && handle === productHandles[0] ? heroContainer : productsContainer;
                if (showHero && handle === productHandles[0]) {
                    showHero = false; // Ensure hero is only used once
                }

                const productCard = document.createElement('div');
                productCard.className = 'product-card';
                productCard.style.flexBasis = `calc(100% / ${rowLength} - 20px)`;

                let variantsDropdown = product.variants.length > 1 ? `<select>` : '';
                product.variants.forEach(variant => {
                    variantsDropdown += `<option value="${variant.id}">${variant.title}</option>`;
                });
                variantsDropdown += product.variants.length > 1 ? `</select>` : '';

                productCard.innerHTML = `
                    <a href="/products/${product.handle}">
                        <img src="${product.images[0]}" alt="${product.title}" style="width: 100%;">
                    </a>
                    <h2>${product.title}</h2>
                    <p>${product.variants[0].price}</p>
                    ${variantsDropdown}
                    <button class="add-to-cart-btn" onclick="addToCart('${product.variants[0].id}')">Add to Cart</button>
                `;

                container.appendChild(productCard);
                allVariantIds.push(product.variants[0].id); // Assume adding the first variant by default
            });

            loader.style.display = 'none';
            addAllToCartButton.style.display = 'block'; // Show add all to cart button once all products are loaded
        })
        .catch(error => {
            console.error('Error loading products:', error);
        });
});

</script>


<style>
  .loader {
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 50px;
    height: 50px;
    background-color: #f3f3f3;
    border-radius: 50%;
    border-top: 5px solid blue;
    animation: spin 1s linear infinite;
}
.product-grid {
    display: flex;
    flex-wrap: wrap;
    margin-top: 20px;
}
.product-card {
    margin: 10px;
    //flex-grow: 1;
}
.hero-product {
    font-size: 24px;
    color: red;
}
.add-to-cart-btn {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border: 0;
  cursor: pointer;
  font: inherit;
  font-size: 1.5rem;
  text-decoration: none;
  color: rgb(18, 18, 18);
  -webkit-appearance: none;
  appearance: none;
  background-color: rgb(255, 255, 255);
  padding: .8rem;
  min-width: 100%;
  box-sizing: border-box;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>